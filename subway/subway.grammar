@grammar subway
 @description Builds a sublime-syntax file.
 @catchAllKeyword error
 @constructor js ./built/nodes.js ProgramNode
 @keywords
  rootLevel
@abstract rootLevel
@wordType any
@wordType float
@wordType bool
@wordType scope any
@wordType regex any
@wordType contextName any
@keyword any rootLevel
 @columns any*
@keyword name any
@keyword version rootLevel
 @columns float
@keyword file_extensions any
@keyword global_scope any
@keyword hidden rootLevel
 @columns bool
@keyword first_line_match any
@keyword variableDef
 @columns any regex*
@keyword variables any
 @catchAllKeyword variableDef
@keyword contexts rootLevel
 @catchAllKeyword contextDef
@keyword contextDef
 @constructor js ./built/nodes.js ContextNode
 @keywords
  match
  include
  meta_include_prototype
  meta_scope
  meta_content_scope
  clear_scopes
@keyword set_context contextDef
@keyword push_context contextDef
@keyword include
 @columns contextName
@keyword meta_include_prototype
 @columns bool
 @description Used to stop the current context from automatically including the prototype context.
@keyword meta_scope
 @columns scope
 @description This assigns the given scope to all text within this context, including the patterns that push the context onto the stack and pop it off.
@keyword meta_content_scope
 @columns scope
 @description Same as meta_scope, but does not apply to the text that triggers the context (e.g., in the above string example, the content scope would not get applied to the quote characters).
@keyword clear_scopes
 @description This setting allows removing scope names from the current stack. It can be an integer, or the value true to remove all scope names. It is applied before meta_scope and meta_content_scope. This is typically only used when one syntax is embedding another.
 @columns any*
@keyword push any
 @description Can be a scope, scope[], or anonymous context.
@keyword pop
 @description True is only acceptable value
 @columns bool
@keyword scopes
 @columns scope*
@keyword set push
@keyword embed
@keyword captures
 @catchAllKeyword capture
@keyword capture
 @columns scope
@keyword match
 @constructor js ./built/nodes.js MatchNode
 @columns regex*
 @keywords
  push
  scopes
  push_context
  set_context
  pop
  set
  embed
  captures
@keyword error
 @constructor js ErrorNode